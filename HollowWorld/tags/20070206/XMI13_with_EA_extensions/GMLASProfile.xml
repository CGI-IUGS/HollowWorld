<?xml version="1.0"?>
<UMLProfile profiletype="uml2">

	<!--Profile name, version number and general notes -->
	<Documentation id="GMLAS" name="UML Profile for GML Application Schemas" version="1"
	               notes="This profile defines a set of stereotypes and tagged values for defining XSD Schemas that follow the patterns used in XSD representations of GML Application Schemas.   
						These follow the normative rules provided in GML 3.2  Annex E, and in proposed new version of ISO 19118. 
						Implemented for Enterprise Architect tool by Simon Cox, CSIRO Exploration and Mining.   Copyright Â© 2005, 2006, 2007 CSIRO - see https://www.seegrid.csiro.au/twiki/bin/view/Xmml/LegalNotices#Software_Notice "/>

	<!-- The profile content -->
	<Content>

		<!-- List of stereotypes used in this profile. Each stereotype may also include tagged values, constraints, metafile and descriptive comments-->
		<Stereotypes>

			<!-- Stereotypes used for designing ISO 19109/19118/19136 or GML Application Schema -->

			<Stereotype name="Application Schema"
			            notes="Root of model describing an Application Schema. Contains definitions of feature-types and other components related to a single conceptually coherent application.     This will normally have a single maintenance and governance framework, and shall use a single XML namespace. ">
				<AppliesTo>
					<Apply type="package"/>
				</AppliesTo>
				<TaggedValues>
					<Tag name="owner" description="Party responsible for maintenance of this package"/>
					<Tag name="targetNamespace" description="URI to unique target namespace"/>
					<Tag name="xmlns" description="Prefix associated with namespace"/>
					<Tag name="version" description="Schema version"/>
					<Tag name="xsdDocument" description="Relative path to XML Schema document corresponding to this package."/>
					<Tag name="gmlProfileSchema" description="an element  gml:gmlProfileSchema  with the content of the tagged value shall be created in an appinfo annotation of the  schema  element."/>
					<!-- 					<Tag name="targetNamespacePrefix" description="(EA XML Profile) Prefix associated with namespace"/>
					<Tag name="schemaLocation" description="(EA XML Profile) URI which identifies the location of the schema."/>
					<Tag name="defaultNamespace" description="(EA XML Profile) Specifies the default namespace attribute in the schema element" 
					default="http://www.w3.org/2001/XMLSchema"/>					
					<Tag name="elementFormDefault" description="(EA XML Profile) Global default specifying whether instance elements require namespace prefix" values="qualified | unqualified" 
					default="qualified"/>
					<Tag name="attributeFormDefault" description="(EA XML Profile) Global default specifying whether instance attributes require namespace prefix" values="qualified | unqualified" 
					default="unqualified"/>
					<Tag name="modelGroup" description="(EA XML Profile) Default model group used when generating complexType definitions for this Schema" values="all | sequence | choice" 
					default="sequence"/>
					<Tag name="memberNames" description="(EA XML Profile) Determines whether the UML attribute and role names are qualified by the UML class name" values="qualified | unqualified" 
					default="unqualified" />
					<Tag name="anonymousType" description="(EA XML Profile) Specifies whether the class type is anonymous for attributes" values="true | false" 
					default="true" />
					<Tag name="anonymousRole" description="(EA XML Profile) Specifies if the role name is included in the element declaration for the UML attribute" values="true | false" 
					default="false" />
					<Tag name="elementDerivation" description="(EA XML Profile) Determines whether derived complexType definitions will be used or copy down inheritance" values="true | false" 
					default="true" /> -->
				</TaggedValues>
			</Stereotype>

			<Stereotype name="Leaf"
			            notes="Subset of model describing a schema. A leaf package shall not contain any other packages.     When implemented using W3C XML Schema, all Leaf package contents or component classes are typically placed within one XML schema document.">
				<AppliesTo>
					<Apply type="package"/>
				</AppliesTo>
				<TaggedValues>
					<Tag name="version" description="Schema version"/>
					<Tag name="xsdDocument" description="Relative path to XML Schema document corresponding to this package."/>
				</TaggedValues>
			</Stereotype>

			<Stereotype name=" " notes="Class represents an object type 'with identity' as defined in ISO 19118 and 19136.  
			This is the default stereotype for classes in Application Schemas, i.e. a class with no stereotype is assumed to be an ObjectType.
			In GML Application Schemas classes stereotyped Type are implemented as descendents of gml:AbstractGMLType.">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="noPropertyType" description="suppress automatic creation of *PropertyType complexType" values="true | false" default="false"/>
					<Tag name="byValuePropertyType" description="enforce the 'by value' property pattern without xlinks" values="true | false" default="false"/>
					<Tag name="xsdName" description="value to be used for the schema conversion instead of the UML name"/>
					<Tag name="isCollection" description="attribute group gml:AggregationAttributeGroup is added to the complex type of the feature type" values="true | false" default="false"/>
					<Tag name="hasXmlLang" description="axml attribute xml:lang shall be generated for the type representing the class" values="true | false" default="false"/>
					<Tag name="xsdCanonicalType" description="no type shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalElement" description="no element shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalPropertyType" description="type to be referenced if the class is used as a type of a property"/>
					<Tag name="xsdCanonicalPropertyGroup" description="group to be referenced if the class is used as a type of a property"/>

 					<Tag name="xsdDerivation" description="class implemented as new type + element, or by applying constraints only" values="true | false" default="true"/>
				</TaggedValues>
			</Stereotype>

			<Stereotype name="FeatureType" notes="Class represents a Feature type as defined in ISO 19109, ISO 19136.">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="noPropertyType" description="suppress automatic creation of *PropertyType complexType" values="true | false" default="false"/>
					<Tag name="byValuePropertyType" description="enforce the 'by value' property pattern without xlinks" values="true | false" default="false"/>
					<Tag name="xsdName" description="value to be used for the schema conversion instead of the UML name"/>
					<Tag name="isCollection" description="attribute group gml:AggregationAttributeGroup is added to the complex type of the feature type" values="true | false" default="false"/>
					<Tag name="hasXmlLang" description="axml attribute xml:lang shall be generated for the type representing the class" values="true | false" default="false"/>
					<Tag name="xsdCanonicalType" description="no type shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalElement" description="no element shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalPropertyType" description="type to be referenced if the class is used as a type of a property"/>
					<Tag name="xsdCanonicalPropertyGroup" description="group to be referenced if the class is used as a type of a property"/>

 					<Tag name="xsdDerivation" description="class implemented as new type + element, or by applying constraints only" values="true | false" default="true"/>
				</TaggedValues>
			</Stereotype>

			<Stereotype name="Type" notes="(from UML 2) Abstract data type, without identity.   
			In UML 2 this effectively supersedes 'interface' and is typically used to group a set of properties that are realized or mixed-in to the inheriting/associated class.
			
			In Application schemas may only be referenced if a canonical encoding is defined.">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="noPropertyType" description="suppress automatic creation of *PropertyType complexType" values="true | false" default="false"/>
					<Tag name="byValuePropertyType" description="enforce the 'by value' property pattern without xlinks" values="true | false" default="false"/>
					<Tag name="xsdName" description="value to be used for the schema conversion instead of the UML name"/>
					<Tag name="isCollection" description="attribute group gml:AggregationAttributeGroup is added to the complex type of the feature type" values="true | false" default="false"/>
					<Tag name="hasXmlLang" description="axml attribute xml:lang shall be generated for the type representing the class" values="true | false" default="false"/>
					<Tag name="xsdCanonicalType" description="no type shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalElement" description="no element shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalPropertyType" description="type to be referenced if the class is used as a type of a property"/>
					<Tag name="xsdCanonicalPropertyGroup" description="group to be referenced if the class is used as a type of a property"/>

 					<Tag name="xsdDerivation" description="class implemented as new type + element, or by applying constraints only" values="true | false" default="true"/>
				</TaggedValues>
			</Stereotype>

<!--
			<Stereotype name="Type" notes="(Deprecated) Class represents an (abstract) Object type as defined in ISO 19103, 19118,19136">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>
				
				<TaggedValues>
					<Tag name="isAbstract" values="true" />
					<Tag name="noPropertyType" description="suppress automatic creation of *PropertyType complexType" values="true | false" default="false"/>
					<Tag name="byValuePropertyType" description="enforce the 'by value' property pattern without xlinks" values="true | false" default="false"/>
				</TaggedValues>
	-->

			<Stereotype name="DataType"
			            notes="Class represents a DataType as defined in ISO 19103, 19109, 19136. This includes structured classes without identity.    
						In a GML implementation this is implemented as a complexType element in which the attributes and associations are complexContent (sub-elements) but the type is *not* derived (transitively) from AbstractGMLType or AbstractFeatureType.     This should be used as the fall-through stereotype for classes in application schemas, to be used for all classes that do not fall into one of the other categories. ">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="noPropertyType" description="suppress automatic creation of *PropertyType complexType" values="true | false" default="false"/>
					<Tag name="byValuePropertyType" description="enforce the 'by value' property pattern without xlinks" values="true | false" default="false"/>
					<Tag name="xsdName" description="value to be used for the schema conversion instead of the UML name"/>
					<Tag name="isCollection" description="attribute group gml:AggregationAttributeGroup is added to the complex type of the feature type" values="true | false" default="false"/>
					<Tag name="hasXmlLang" description="axml attribute xml:lang shall be generated for the type representing the class" values="true | false" default="false"/>
					<Tag name="xsdCanonicalType" description="no type shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalElement" description="no element shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalPropertyType" description="type to be referenced if the class is used as a type of a property"/>
					<Tag name="xsdCanonicalPropertyGroup" description="group to be referenced if the class is used as a type of a property"/>

 					<Tag name="xsdDerivation" description="class implemented as new type + element, or by applying constraints only" values="true | false" default="true"/>
				</TaggedValues>
			</Stereotype>

			<Stereotype name="Union" notes="Class represents a Union as defined in ISO 19107, 19136">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="noPropertyType" description="suppress automatic creation of *PropertyType complexType" values="true | false" default="false"/>
					<Tag name="byValuePropertyType" description="enforce the 'by value' property pattern without xlinks" values="true | false" default="false"/>
					<Tag name="xsdName" description="value to be used for the schema conversion instead of the UML name"/>
					<Tag name="hasXmlLang" description="axml attribute xml:lang shall be generated for the type representing the class" values="true | false" default="false"/>
					<Tag name="xsdCanonicalType" description="no type shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalElement" description="no element shall be generated for the class, but the given type or element referenced"/>
					<Tag name="xsdCanonicalPropertyType" description="type to be referenced if the class is used as a type of a property"/>
					<Tag name="xsdCanonicalPropertyGroup" description="group to be referenced if the class is used as a type of a property"/>
				</TaggedValues>
			</Stereotype>

			<Stereotype name="CodeList"
			            notes="Class represents an CodeList as defined in ISO 19103, 19136;     i.e. a list of consecutive integers or index values, which correspond to literal values as indicated in the schema annotation    A key functional distinction compared to Enumeration is that CodeList is extensible.     In the GML implementation this is normally accomplished through a union with a pattern defining a string 'other:value' where 'value' is a string without internal spaces">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="asDictionary" description="implement as a dictionary instead of enumeration" values="true | false" default="false"/>
				</TaggedValues>
			</Stereotype>

			<Stereotype name="Enumeration" notes="Class represents an Enumeration as defined in ISO 19103, 19136    i.e. a fixed list of literal values, that are implemented in an XML Schema as enumeration restriction of xsd:string">
				<AppliesTo>
					<Apply type="class"/>
				</AppliesTo>

			</Stereotype>

			<Stereotype name="property" notes="attribute or associationEnd represents a 'property' of the containing class.">
				<AppliesTo>
					<Apply type="attribute"/>
					<Apply type="associationRole"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="inlineOrByReference" description="Constrain attribute or association-end to be implemented either inline or by reference only" values="inline | byReference"/>
					<Tag name="sequenceNumber" description="Specify position of attribute or association-end within content model implemented as an ordered sequence"/>
					<Tag name="isMetadata" description="flag that attribute or association-end is to be treated as metadata" values="true | false" default="false"/>
				</TaggedValues>
			</Stereotype>

			<Stereotype name="multipleInheritance" notes="generalized class represents a 'property' of the containing class.">
				<AppliesTo>
					<Apply type="generalization"/>
				</AppliesTo>

				<TaggedValues>
					<Tag name="sequenceNumber" description="Specify position of attribute-group within content model implemented as an ordered sequence"/>
				</TaggedValues>
			</Stereotype>

		</Stereotypes>
	</Content>
</UMLProfile>